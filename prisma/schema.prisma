// Ghost Job Detector - Prisma Schema
// Database: ghost-job-postgres

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Job posting sources (URLs or PDFs)
model Source {
  id                String   @id @default(cuid())
  kind              SourceKind // 'url' or 'pdf'
  url               String?  // Original URL for URL sources
  blobUrl           String?  // Blob storage URL for PDFs
  contentSha256     String   @unique // Hash for deduplication
  httpStatus        Int?     // HTTP response status for URLs
  firstSeenAt       DateTime @default(now())
  lastSeenAt        DateTime @updatedAt
  
  // Relations
  rawDocuments      RawDocument[]
  jobListings       JobListing[]
  events            Event[]
  
  // Indexes
  @@index([contentSha256])
  @@index([kind, firstSeenAt])
  @@map("sources")
}

// Raw document content from sources
model RawDocument {
  id            String   @id @default(cuid())
  sourceId      String
  storageUrl    String   // Blob storage URL
  mimeType      String   // 'text/html', 'application/pdf', etc.
  textContent   String?  // Extracted text content
  textSha256    String?  // Hash of extracted text
  createdAt     DateTime @default(now())
  
  // Relations
  source        Source   @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([sourceId])
  @@index([textSha256])
  @@map("raw_documents")
}

// Normalized job posting data
model JobListing {
  id                String   @id @default(cuid())
  sourceId          String
  title             String
  company           String
  location          String?
  remoteFlag        Boolean  @default(false)
  postedAt          DateTime?
  canonicalUrl      String?  // Canonical job URL
  rawParsedJson     Json     // Original parsing results
  normalizedKey     String   @unique // Unique identifier for deduplication
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  source            Source     @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  analyses          Analysis[]
  keyFactors        KeyFactor[]
  corrections       JobCorrection[]
  
  // Indexes
  @@index([sourceId])
  @@index([company])
  @@index([normalizedKey])
  @@index([postedAt])
  @@map("job_listings")
}

// Analysis results and scoring
model Analysis {
  id                String   @id @default(cuid())
  jobListingId      String
  score             Decimal  @db.Decimal(5,4) // 0.0000 to 1.0000
  verdict           AnalysisVerdict
  reasonsJson       Json     // Detailed reason codes and factors
  modelVersion      String
  processingTimeMs  Int?     // Analysis duration
  createdAt         DateTime @default(now())
  
  // Relations
  jobListing        JobListing @relation(fields: [jobListingId], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([jobListingId, createdAt(sort: Desc)])
  @@index([verdict])
  @@index([modelVersion])
  @@map("analyses")
}

// Risk and positive factors for each job
model KeyFactor {
  id                String     @id @default(cuid())
  jobListingId      String
  factorType        FactorType // 'risk' or 'positive'
  factorDescription String
  impactScore       Decimal    @db.Decimal(5,4) // Impact weight
  createdAt         DateTime   @default(now())
  
  // Relations
  jobListing        JobListing @relation(fields: [jobListingId], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([jobListingId])
  @@index([factorType])
  @@map("key_factors")
}

// Company intelligence and metrics
model Company {
  id                    String   @id @default(cuid())
  name                  String   @unique
  normalizedName        String   @unique // Cleaned company name for deduplication
  totalPostings         Int      @default(0)
  avgGhostProbability   Decimal  @db.Decimal(5,4) @default(0)
  lastAnalyzedAt        DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Indexes
  @@index([totalPostings])
  @@map("companies")
}

// Parsing corrections for machine learning
model ParsingCorrection {
  id                String   @id @default(cuid())
  sourceUrl         String   
  originalTitle     String?  // What the parser extracted
  correctTitle      String?  // What it should have been
  originalCompany   String?  // What the parser extracted
  correctCompany    String?  // What it should have been
  parserUsed        String   // Which parser was used
  parserVersion     String   // Version of the parser
  correctionReason  String?  // Why correction was needed
  domainPattern     String?  // Domain pattern for learning
  urlPattern        String?  // URL pattern for learning
  confidence        Decimal  @db.Decimal(3,2) @default(1.0) // Confidence in correction
  correctedBy       String?  // User or system that made correction
  isVerified        Boolean  @default(false) // Whether correction has been verified
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Indexes for learning queries
  @@index([sourceUrl])
  @@index([parserUsed, parserVersion])
  @@index([domainPattern])
  @@index([correctedBy])
  @@index([isVerified])
  @@map("parsing_corrections")
}

// Manual job listing corrections by users
model JobCorrection {
  id                String      @id @default(cuid())
  jobListingId      String      // Reference to JobListing
  fieldName         String      // 'title', 'company', 'location', etc.
  oldValue          String?     // Original value
  newValue          String      // Corrected value
  userVerified      Boolean     @default(true) // User confirmed correction
  algorithmVerified Boolean     @default(false) // Algorithm confirmed correction
  learningWeight    Decimal     @db.Decimal(3,2) @default(0.6) // Weight for ML training
  correctionReason  String?     // Why correction was needed
  validationData    Json?       // Validation results and metadata
  isForceCommit     Boolean     @default(false) // Manual override flag
  correctedBy       String      @default("user") // Who made the correction
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relations
  jobListing        JobListing  @relation(fields: [jobListingId], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([jobListingId])
  @@index([fieldName])
  @@index([correctedBy])
  @@index([createdAt])
  @@map("job_corrections")
}

// Algorithm feedback and learning data
model AlgorithmFeedback {
  id                String   @id @default(cuid())
  sourceUrl         String   // Original job posting URL
  extractedData     Json     // What algorithm extracted
  correctedData     Json     // What it should have been
  confidenceScore   Decimal  @db.Decimal(5,4) // Algorithm confidence
  learningWeight    Decimal  @db.Decimal(3,2) // Weight for training
  feedbackType      String   // 'manual_correction', 'validation_result', etc.
  improvementAreas  Json?    // Areas where algorithm can improve
  validationMethod  String?  // How correction was validated
  createdAt         DateTime @default(now())
  
  // Indexes
  @@index([sourceUrl])
  @@index([feedbackType])
  @@index([createdAt])
  @@map("algorithm_feedback")
}

// System events and audit trail
model Event {
  id          String     @id @default(cuid())
  kind        EventKind
  refTable    String?    // Referenced table name
  refId       String?    // Referenced record ID
  meta        Json?      // Event metadata
  createdAt   DateTime   @default(now())
  
  // Relations
  source      Source?    @relation(fields: [refId], references: [id])
  
  // Indexes
  @@index([kind, createdAt])
  @@index([refTable, refId])
  @@map("events")
}

// User accounts and authentication
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  role          UserRole @default(USER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastLoginAt   DateTime?
  
  // Indexes
  @@index([email])
  @@map("users")
}

// Enums
enum SourceKind {
  url
  pdf
}

enum AnalysisVerdict {
  likely_real
  uncertain  
  likely_ghost
}

enum FactorType {
  risk
  positive
}

enum EventKind {
  source_submitted
  document_processed
  analysis_completed
  analysis_failed
  queue_processed
  admin_action
  agent_validate
  agent_promotion
}

enum UserRole {
  USER
  ADMIN
  ENTERPRISE
}